// src/bot/index.ts
import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config';

export class TelegramBotService {
  private bot: TelegramBot;

  constructor() {
    this.bot = new TelegramBot(config.telegramToken, { 
      polling: {
        interval: 300,
        autoStart: true,
        params: {
          timeout: 10
        }
      },
      onlyFirstMatch: false
    });
    this.initializeHandlers();
    this.checkBotStatus();
  }

  private async checkBotStatus(): Promise<void> {
    try {
      const botInfo = await this.bot.getMe();
      console.log('\n=== –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ===');
      console.log(`–ò–º—è –±–æ—Ç–∞: ${botInfo.username}`);
      console.log(`ID –±–æ—Ç–∞: ${botInfo.id}`);
      console.log(`–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: ${config.groupId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
      if (config.groupId) {
        try {
          const chatMember = await this.bot.getChatMember(config.groupId, botInfo.id);
          console.log('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:', chatMember.status);
          
          const chatInfo = await this.bot.getChat(config.groupId);
          console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:', {
            title: chatInfo.title,
            type: chatInfo.type,
            id: chatInfo.id
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –≥—Ä—É–ø–ø–µ:', error);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
    }
  }

  private initializeHandlers(): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å polling
    this.bot.on('polling_error', (error) => {
      console.error('Polling error:', error);
    });

    // // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // this.bot.on('message', (msg) => {
    //   console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', {
    //     chat_id: msg.chat.id,
    //     type: msg.chat.type,
    //     from: msg.from?.username,
    //     text: msg.text
    //   });
    // });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    this.bot.on('new_chat_members', async (msg) => {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:', {
        chat_id: msg.chat.id,
        new_members: msg.new_chat_members?.map(member => ({
          username: member.username,
          first_name: member.first_name,
          is_bot: member.is_bot
        }))
      });

      const chatId = msg.chat.id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
      if (config.groupId && chatId.toString() !== config.groupId) {
        console.log(`–°–æ–±—ã—Ç–∏–µ –≤ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø–µ. –û–∂–∏–¥–∞–µ–º–∞—è: ${config.groupId}, –ü–æ–ª—É—á–µ–Ω–Ω–∞—è: ${chatId}`);
        return;
      }

      for (const newMember of msg.new_chat_members || []) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
        if (newMember.is_bot) {
          console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞:', newMember.username);
          continue;
        }

        const welcomeMessage = `
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newMember.first_name}\\!* üéâ

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ\\! 

üìå *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*
‚Ä¢ [–ù–∞—à —Å–∞–π—Ç](https://www.portalmasterov.ru/)
‚Ä¢ [–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã](https://t.me/tetststdstst/5)
‚Ä¢ [–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã](https://t.me/tetststdstst/5)
`;
        
        try {
          await this.bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true
          });
          console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è:', newMember.username);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          try {
            await this.bot.sendMessage(
              chatId,
              `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newMember.first_name}!`
            );
          } catch (fallbackError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', fallbackError);
          }
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    this.bot.on('my_chat_member', async (msg) => {
      console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞:', {
        chat_id: msg.chat.id,
        status: msg.new_chat_member.status,
        chat_type: msg.chat.type
      });
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã
  public async checkGroup(groupId: string): Promise<void> {
    try {
      const chat = await this.bot.getChat(groupId);
      console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã ===');
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:', {
        id: chat.id,
        title: chat.title,
        type: chat.type
      });
      
      const botInfo = await this.bot.getMe();
      const memberInfo = await this.bot.getChatMember(groupId, botInfo.id);
      console.log('–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:', memberInfo.status);
      console.log('======================\n');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã:', error);
    }
  }
}